; -*- mode: clojure; -*-
; vim: filetype=clojure

; Init logging. No file parameter, log to stdout.
(logging/init)

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host})
  (repl-server {:host host}))

(periodically-expire 5)

(defn get-env
  [var-name]
  (let [val (System/getenv var-name)]
    (when-not (clojure.string/blank? val)
      val)))

(defn datadog-forwarder
  [key]
  (batch 100 10 (async-queue! :datadog-forwarder
                              {:queue-size 1e4
                               :core-pool-size 5
                               :max-pools-size 100}
                              (datadog {:api-key key}))))

(defn reformat
  [uniform-host event]
  (-> (assoc event :host uniform-host)
      (update :tags conj (str "host:" (:host event)))))

(let [uniform-host (or (get-env "UNIFORMHOST") "riemann")
      datadog-key  (get-env "DATADOGKEY")
      send-datadog (some-> datadog-key datadog-forwarder)]
  (streams
   (default :ttl 60 (index))
   (if send-datadog
    #(send-datadog (reformat uniform-host %))
    identity)))
